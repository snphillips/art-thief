{"version":3,"sources":["Header.js","Button.js","ArtResult.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Button","type","value","placeholder","onClick","this","props","handleSubmit","ArtResult","parent_state","randomCooperDate","randomCooperTitle","imageURL","randomCooperImageURL","url","randomCooperURL","src","alt","href","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","serverSource","displayArtResult","cooperHewittRandomFromAPI","bind","assertThisInitialized","_this2","axios","get","then","response","setState","data","object","title","date","images","z","catch","error","console","log","event","preventDefault","Header_Header","Button_Button","ArtResult_ArtResult","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iQAGqBA,mLAEjB,OAEIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,oBAJ4BC,aCDfC,mLAEjB,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACVG,KAAK,SACLC,MAAM,sDACNC,YAAY,iBACZC,QAASC,KAAKC,MAAMC,wBAXIR,aCCfS,mLAINH,KAAKC,MAAMG,aAAaC,iBACvBL,KAAKC,MAAMG,aAAaE,kBADtC,IAEMC,EAAWP,KAAKC,MAAMG,aAAaI,qBACnCC,EAAMT,KAAKC,MAAMG,aAAaM,gBAElC,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKmB,IAAKJ,EAAUK,IAAI,8BAA6BnB,UAAU,qBAC/DH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGqB,KAAMJ,EAAKhB,UAAU,0BAAxB,uCAZ0BC,aCKlBoB,cACnB,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAhB,KAAAc,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAhB,KAAAgB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApB,KAAMC,KAEDoB,MAAQ,CACXC,aAAc,kDAEdhB,kBAAmB,GACnBD,iBAAkB,GAClBG,qBAAsB,GACtBE,gBAAiB,GAGjBa,kBAAkB,GAItBR,EAAKS,0BAA4BT,EAAKS,0BAA0BC,KAA/BT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACjCA,EAAKb,aAAea,EAAKb,aAAauB,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAjBDA,2FAyBS,IAAAY,EAAA3B,KAE1B4B,IAAMC,IAAI7B,KAAKqB,MAAMC,cAClBQ,KAAM,SAACC,GACNJ,EAAKK,SAAS,CAAC1B,kBAAmByB,EAASE,KAAKC,OAAOC,QACvDR,EAAKK,SAAS,CAAC3B,iBAAkB0B,EAASE,KAAKC,OAAOE,OACtDT,EAAKK,SAAS,CAACxB,qBAAsBuB,EAASE,KAAKC,OAAOG,OAAO,GAAGC,EAAE7B,MACtEkB,EAAKK,SAAS,CAACtB,gBAAiBqB,EAASE,KAAKC,OAAOzB,QAEtD8B,MAAM,SAAUC,GACfC,QAAQC,IAAIF,0CAILG,GACXA,EAAMC,iBACNH,QAAQC,IAAI,kBACZ1C,KAAKwB,6DAOL,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqD,EAAD,MACAvD,EAAAC,EAAAC,cAACsD,EAAD,CAAQ5C,aAAcF,KAAKE,eAC3BZ,EAAAC,EAAAC,cAACuD,EAAD,CAAW3C,aAAcJ,KAAKqB,gBAtDL3B,aCIbsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.7539357e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import './App.css';\n\nexport default class Header extends Component {\n  render() {\n    return (\n\n        <h1 className=\"Header\">Art Thief</h1>\n\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Button extends Component {\n  render() {\n    return (\n      <div className=\"Button\">\n\n        <form>\n          <input\n            className=\"button\"\n            type=\"submit\"\n            value=\"Reveal a random item from the Cooper Hewitt Museum.\"\n            placeholder=\"steal this art\"\n            onClick={this.props.handleSubmit}\n          />\n         </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\n\nexport default class ArtResult extends Component {\n  render() {\n\n  // Some variables to make this page easier to read.\n  const date = this.props.parent_state.randomCooperDate\n  const title = this.props.parent_state.randomCooperTitle\n  const imageURL = this.props.parent_state.randomCooperImageURL\n  const url = this.props.parent_state.randomCooperURL\n\n    return (\n      <div className=\"ArtResult\">\n        <img src={imageURL} alt=\"random item from collection\"className=\"cooper-image-URL\"/>\n        <div><a href={url} className=\"cooper-learn-more-link\">learn more about this item</a></div>\n      </div>\n    );\n  }\n}\n\n\n\n        // <div className=\"cooper-title\">{title}</div>\n        // <div className=\"cooper-date\">{date}</div>\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Header from './Header';\nimport Button from './Button';\nimport ArtResult from './ArtResult';\n// import ReactSpinner from './ReactSpinner'\n// import './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      serverSource: 'https://art-thief.herokuapp.com/cooperhewittapi',\n      // serverSource: 'http://localhost:8000/cooperhewittapi',\n      randomCooperTitle: '',\n      randomCooperDate: '',\n      randomCooperImageURL: '',\n      randomCooperURL: '',\n\n      // TODO: display art result page or not\n      displayArtResult: false,\n    };\n\n  // This binding is necessary to make `this` work in the callback\n  this.cooperHewittRandomFromAPI = this.cooperHewittRandomFromAPI.bind(this);\n  this.handleSubmit = this.handleSubmit.bind(this);\n\n  }\n// ***********************************\n// End of constructor\n// ***********************************\n\n\n  cooperHewittRandomFromAPI() {\n    // The source of data from the server is set in this.state above\n    axios.get(this.state.serverSource)\n      .then( (response) => {\n        this.setState({randomCooperTitle: response.data.object.title})\n        this.setState({randomCooperDate: response.data.object.date})\n        this.setState({randomCooperImageURL: response.data.object.images[0].z.url})\n        this.setState({randomCooperURL: response.data.object.url})\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(\"button clicked\")\n    this.cooperHewittRandomFromAPI()\n  };\n\n//  ==================================\n//  And finally, the render\n//  ==================================\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Button handleSubmit={this.handleSubmit}/>\n        <ArtResult parent_state={this.state}/>\n      </div>\n    );\n  }\n}\n        // <ReactSpinner loading={this.props.loading} />\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}